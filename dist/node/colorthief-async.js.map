{"version":3,"file":"colorthief-async.js","sources":["../../src/shared.ts","../../src/color-thief.node.ts"],"sourcesContent":["import {ColorRGB, ColorThiefOptions} from \"./models\";\n\n\n\nexport const createPixelArray = (imgData: Uint8ClampedArray, pixelCount: number, quality: number) => {\n    const pixels = imgData;\n    const pixelArray = [];\n\n    for (let i = 0, offset, r, g, b, a; i < pixelCount; i = i + quality) {\n        offset = i * 4;\n        r = pixels[offset + 0];\n        g = pixels[offset + 1];\n        b = pixels[offset + 2];\n        a = pixels[offset + 3];\n\n        // If pixel is mostly opaque and not white\n        if (typeof a === 'undefined' || a >= 125) {\n            if (!(r > 250 && g > 250 && b > 250)) {\n                pixelArray.push([r, g, b]);\n            }\n        }\n    }\n    return pixelArray;\n};\n\nexport const validateOptions = (options?: Partial<ColorThiefOptions>): ColorThiefOptions => {\n    let { colorCount, quality } = options || {};\n\n    if (typeof colorCount === 'undefined' || !Number.isInteger(colorCount)) {\n        colorCount = 10;\n    } else if (colorCount === 1 ) {\n        throw new Error('colorCount should be between 2 and 20. To get one color, call getColor() instead of getPalette()');\n    } else {\n        colorCount = Math.max(colorCount, 2);\n        colorCount = Math.min(colorCount, 20);\n    }\n\n    if (typeof quality === 'undefined' || Number.isInteger(quality)) {\n        quality = 10;\n    } else if (quality < 1) {\n        quality = 10;\n    }\n\n    return {\n        colorCount,\n        quality\n    }\n}\n\nexport const getPaletteFromImageData = (imageData: ImageData, quantize: any, options?: Partial<ColorThiefOptions>): ColorRGB[] | null => {\n    const {\n        colorCount,\n        quality\n    } = validateOptions(options);\n\n    const pixelCount = imageData.width * imageData.height;\n\n    const pixelArray = createPixelArray(imageData.data, pixelCount, quality);\n\n    // Send array to quantize function which clusters values\n    // using median cut algorithm\n    const cmap = quantize(pixelArray, colorCount);\n    return cmap ? cmap.palette() : null;\n}\n","import {ColorCallback, ColorRGB, ColorThiefOptions, PaletteCallback} from './models';\nimport {getPaletteFromImageData} from \"./shared\";\nimport * as ndarray from \"ndarray\";\n\nimport getPixels from \"get-pixels/node-pixels\";\n// @ts-ignore\nimport quantize from \"quantize\"\n\n\n/*\n * Color Thief Async v2.3.0\n * Originally by Lokesh Dhakar - http://www.lokeshdhakar.com\n *\n * Thanks\n * ------\n * Nick Rabinowitz - For creating quantize.js.\n * John Schulz - For clean up and optimization. @JFSIII\n * Nathan Spady - For adding drag and drop support to the demo page.\n *\n * License\n * -------\n * Released under the MIT license\n * https://raw.githubusercontent.com/piksel/color-thief/master/LICENSE\n *\n * @license\n */\n\n/*\n * getColor(imagePath[, quality, [, callback]])\n * returns Promise<{r: num, g: num, b: num}>\n *\n * Use the median cut algorithm provided by quantize.js to cluster similar\n * colors and return the base color from the largest cluster.\n *\n * Quality is an optional argument. It needs to be an integer. 1 is the highest quality settings.\n * 10 is the default. There is a trade-off between quality and speed. The bigger the number, the\n * faster a color will be returned but the greater the likelihood that it will not be the visually\n * most dominant color.\n *\n * */\nexport const getColor = async (imagePath: string, quality?: number, callback?: ColorCallback): Promise<ColorRGB> =>\n    getPaletteFromSource(imagePath, {quality, colorCount: 5}).then(palette => {\n        callback && callback(palette[0]);\n        return palette[0];\n    });\n\n/*\n * getPalette(imagePath[, { colorCount, quality}, callback])\n * returns Promise< [ {r: num, g: num, b: num}, {r: num, g: num, b: num}, ...] >\n *\n * Use the median cut algorithm provided by quantize.js to cluster similar colors.\n *\n * colorCount determines the size of the palette; the number of colors returned. If not set, it\n * defaults to 10.\n *\n * quality is an optional argument. It needs to be an integer. 1 is the highest quality settings.\n * 10 is the default. There is a trade-off between quality and speed. The bigger the number, the\n * faster the palette generation but the greater the likelihood that colors will be missed.\n *\n *\n */\nexport const getPalette = async (imagePath: string, options?: Partial<ColorThiefOptions>, callback?: PaletteCallback) =>\n    getPaletteFromSource(imagePath, options).then(palette => {\n        callback && callback(palette);\n        return palette;\n    });\n\n\nconst getPixelsAsync = (img: string) =>\n    new Promise<ndarray>((resolve, reject) => {\n        getPixels(img, (error: any, data: ndarray) => {\n            if(error) {\n                reject(error);\n            } else {\n                resolve(data);\n            }\n        })\n    });\n\nconst getPaletteFromSource = async (imagePath: string, options?: Partial<ColorThiefOptions>) => {\n    const imageData = await getPixelsAsync(imagePath).then(pixels => ({\n        data: pixels.data as Uint8ClampedArray,\n        height: pixels.shape[0],\n        width: pixels.shape[1],\n    }));\n    const palette = getPaletteFromImageData(imageData, quantize, options);\n    if(!palette) {\n        throw new Error('Failed to get image color palette');\n    }\n    return palette;\n};\n"],"names":["const","createPixelArray","imgData","pixelCount","quality","pixels","pixelArray","let","i","offset","r","g","b","a","push","validateOptions","options","colorCount","Number","isInteger","Error","Math","max","min","getPaletteFromImageData","imageData","quantize","width","height","data","cmap","palette","getColor","imagePath","callback","getPaletteFromSource","then","getPalette","getPixelsAsync","img","Promise","resolve","reject","getPixels","error","shape"],"mappings":"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"}